import ply.yacc as yacc
from lexer import tokens

# Definición de la gramática

def p_sigma(p):
    '''Sigma : lla Empresas coma version coma firma_digital llc
             | lla Empresas coma firma_digital coma version llc
             | lla version coma Empresas coma firma_digital llc
             | lla version coma firma_digital coma Empresas llc
             | lla firma_digital coma version coma Empresas llc
             | lla firma_digital coma Empresas coma version llc
             | lla Empresas coma version llc
             | lla Empresas coma firma_digital llc
             | lla Empresas llc'''
    if len(p) == 7:
        p[0] = ('Sigma', p[2], p[4], p[6])
    elif len(p) == 6:
        p[0] = ('Sigma', p[2], p[4], None)
    elif len(p) == 4:
        p[0] = ('Sigma', p[2], None, None)

def p_empresas(p):
    '''Empresas : lla EmpresaE llc'''
    p[0] = ('Empresas', p[2])

def p_empresaE(p):
    '''EmpresaE : EmpresaE coma empresa
                | empresa'''
    if len(p) == 4:
        p[0] = p[1] + [p[3]]
    else:
        p[0] = [p[1]]

def p_empresa(p):
    '''empresa : lla nombre_empresa coma fundacion coma direccion coma ingresos_anuales coma pyme coma link coma departamentos llc
               | lla nombre_empresa coma fundacion coma direccion coma ingresos_anuales coma pyme coma departamentos llc'''
    if len(p) == 15:
        p[0] = ('empresa', p[2], p[4], p[6], p[8], p[10], p[12], p[14])
    else:
        p[0] = ('empresa', p[2], p[4], p[6], p[8], p[10], p[12])

def p_nombre_empresa(p):
    '''nombre_empresa : t_nombre_empresa dp string'''
    p[0] = ('nombre_empresa', p[3])

def p_direccion(p):
    '''direccion : lla calle coma ciudad coma pais llc
                 | lla calle coma pais coma ciudad llc
                 | lla ciudad coma calle coma pais llc
                 | lla ciudad coma pais coma calle llc
                 | lla pais coma calle coma ciudad llc
                 | lla pais coma ciudad coma calle llc
                 | lla llc'''
    if len(p) == 2:
        p[0] = ('direccion', None)
    else:
        p[0] = ('direccion', p[2], p[4], p[6])

def p_departamentos(p):
    '''departamentos : pa DepartamentoD pc'''
    p[0] = ('departamentos', p[2])

def p_departamentoD(p):
    '''DepartamentoD : DepartamentoD coma Departamento
                     | Departamento'''
    if len(p) == 4:
        p[0] = p[1] + [p[3]]
    else:
        p[0] = [p[1]]

def p_departamento(p):
    '''Departamento : lla nombre coma jefe coma Subdepartamentos llc
                    | lla nombre coma Subdepartamentos llc
                    | lla Subdepartamentos coma nombre coma jefe llc
                    | lla Subdepartamentos coma nombre llc
                    | lla jefe coma nombre coma Subdepartamentos llc
                    | lla jefe coma Subdepartamentos coma nombre llc'''
    if len(p) == 8:
        p[0] = ('departamento', p[2], p[4], p[6])
    elif len(p) == 6:
        p[0] = ('departamento', p[2], p[4])
    else:
        p[0] = ('departamento', p[2], p[4], p[6])

def p_subdepartamentos(p):
    '''Subdepartamentos : pa SubdepartamentoS pc'''
    p[0] = ('subdepartamentos', p[2])

def p_subdepartamentoS(p):
    '''SubdepartamentoS : SubdepartamentoS coma Subdepartamento
                        | Subdepartamento'''
    if len(p) == 4:
        p[0] = p[1] + [p[3]]
    else:
        p[0] = [p[1]]

def p_subdepartamento(p):
    '''Subdepartamento : lla nombre coma jefe coma Empleados llc
                       | lla nombre llc
                       | lla nombre coma jefe llc
                       | lla nombre coma Empleados llc'''
    if len(p) == 8:
        p[0] = ('subdepartamento', p[2], p[4], p[6])
    elif len(p) == 5:
        p[0] = ('subdepartamento', p[2])
    else:
        p[0] = ('subdepartamento', p[2], p[4])

def p_empleados(p):
    '''Empleados : pa EmpleadoE pc
                 | pa pc'''
    if len(p) == 4:
        p[0] = ('empleados', p[2])
    else:
        p[0] = ('empleados', [])

def p_empleadoE(p):
    '''EmpleadoE : EmpleadoE coma Empleado
                 | Empleado'''
    if len(p) == 4:
        p[0] = p[1] + [p[3]]
    else:
        p[0] = [p[1]]

def p_empleado(p):
    '''Empleado : lla nombre coma edad coma cargo coma salario coma activo coma fecha_contratacion coma Proyectos llc
                | lla nombre coma cargo coma salario coma activo coma fecha_contratacion llc
                | lla nombre coma edad coma cargo coma salario coma activo coma fecha_contratacion llc
                | lla nombre coma cargo coma salario coma activo coma fecha_contratacion coma Proyectos llc'''
    if len(p) == 16:
        p[0] = ('empleado', p[2], p[4], p[6], p[8], p[10], p[12], p[14])
    elif len(p) == 14:
        p[0] = ('empleado', p[2], p[4], p[6], p[8], p[10], p[12])
    else:
        p[0] = ('empleado', p[2], p[4], p[6], p[8], p[10], p[12])

def p_proyectos(p):
    '''Proyectos : pa ProyectoP pc
                 | pa pc'''
    if len(p) == 4:
        p[0] = ('proyectos', p[2])
    else:
        p[0] = ('proyectos', [])

def p_proyectoP(p):
    '''ProyectoP : ProyectoP coma Proyecto
                 | Proyecto'''
    if len(p) == 4:
        p[0] = p[1] + [p[3]]
    else:
        p[0] = [p[1]]

def p_proyecto(p):
    '''Proyecto : lla nombre coma estado coma fecha_inicio coma fecha_fin llc
                | lla nombre coma fecha_inicio llc
                | lla nombre coma fecha_inicio coma fecha_fin llc
                | lla nombre coma estado coma fecha_inicio llc'''
    if len(p) == 10:
        p[0] = ('proyecto', p[2], p[4], p[6], p[8])
    elif len(p) == 6:
        p[0] = ('proyecto', p[2], p[4])
    else:
        p[0] = ('proyecto', p[2], p[4], p[6])

def p_version(p):
    '''version : null
               | t_version dp string'''
    if len(p) == 2:
        p[0] = ('version', None)
    else:
        p[0] = ('version', p[3])

def p_firma_digital(p):
    '''firma_digital : t_firma_digital dp string
                     | null'''
    if len(p) == 2:
        p[0] = ('firma_digital', None)
    else:
        p[0] = ('firma_digital', p[3])

def p_estado(p):
    '''estado : t_estado dp To_do
              | t_estado dp In_progress
              | t_estado dp Canceled
              | t_estado dp Done
              | t_estado dp On_hold
              | null'''
    if len(p) == 2:
        p[0] = ('estado', None)
    else:
        p[0] = ('estado', p[3])

def p_jefe(p):
    '''jefe : t_jefe dp string
            | null'''
    if len(p) == 2:
        p[0] = ('jefe', None)
    else:
        p[0] = ('jefe', p[3])

def p_link(p):
    '''link : t_link dp patron_url
            | null'''
    if len(p) == 2:
        p[0] = ('link', None)
    else:
        p[0] = ('link', p[3])

def p_cargo(p):
    '''cargo : t_cargo dp string
             | null'''
    if len(p) == 2:
        p[0] = ('cargo', None)
    else:
        p[0] = ('cargo', p[3])

def p_salario(p):
    '''salario : t_salario dp real
               | null'''
    if len(p) == 2:
        p[0] = ('salario', None)
    else:
        p[0] = ('salario', p[3])

def p_activo(p):
    '''activo : t_activo dp boolean
              | null'''
    if len(p) == 2:
        p[0] = ('activo', None)
    else:
        p[0] = ('activo', p[3])

def p_fecha_contratacion(p):
    '''fecha_contratacion : t_fecha_contratacion dp fecha
                          | null'''
    if len(p) == 2:
        p[0] = ('fecha_contratacion', None)
    else:
        p[0] = ('fecha_contratacion', p[3])

def p_fecha_inicio(p):
    '''fecha_inicio : t_fecha_inicio dp fecha
                    | null'''
    if len(p) == 2:
        p[0] = ('fecha_inicio', None)
    else:
        p[0] = ('fecha_inicio', p[3])

def p_fecha_fin(p):
    '''fecha_fin : t_fecha_fin dp fecha
                 | null'''
    if len(p) == 2:
        p[0] = ('fecha_fin', None)
    else:
        p[0] = ('fecha_fin', p[3])

def p_fundacion(p):
    '''fundacion : t_fundacion dp fecha
                 | null'''
    if len(p) == 2:
        p[0] = ('fundacion', None)
    else:
        p[0] = ('fundacion', p[3])

def p_ingresos_anuales(p):
    '''ingresos_anuales : t_ingresos_anuales dp real
                        | null'''
    if len(p) == 2:
        p[0] = ('ingresos_anuales', None)
    else:
        p[0] = ('ingresos_anuales', p[3])

def p_pyme(p):
    '''pyme : t_pyme dp boolean
            | null'''
    if len(p) == 2:
        p[0] = ('pyme', None)
    else:
        p[0] = ('pyme', p[3])

def p_error(p):
    print(f"Syntax error at '{p.value}'")

# Construir el parser
parser = yacc.yacc()

# Ejemplo de uso
# data = '{...}'  # Aquí iría tu JSON
# result = parser.parse(data)
# print(result)
